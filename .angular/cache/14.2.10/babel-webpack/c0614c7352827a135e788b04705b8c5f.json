{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http) {\n      this.http = http;\n      this.key = 'products';\n      this.productsSubject = new BehaviorSubject([]);\n      this.products$ = this.productsSubject.asObservable();\n      const stored = localStorage.getItem(this.key);\n\n      if (stored) {\n        console.log('Loaded products from localStorage:', JSON.parse(stored));\n        this.productsSubject.next(JSON.parse(stored));\n      } else {\n        console.log('Loading products from JSON file...');\n        this.loadProductsFromJson().subscribe(products => {\n          console.log('Loaded products from JSON:', products);\n          this.productsSubject.next(products);\n          localStorage.setItem(this.key, JSON.stringify(products));\n        });\n      }\n    }\n\n    loadProductsFromJson() {\n      return this.http.get('assets/data/products.json');\n    }\n\n    getAll() {\n      return this.products$;\n    }\n\n    getAllSync() {\n      return this.productsSubject.value;\n    }\n\n    add(product) {\n      product.id = crypto.randomUUID();\n      const updated = [...this.productsSubject.value, product];\n      this.productsSubject.next(updated);\n      localStorage.setItem(this.key, JSON.stringify(updated));\n    }\n\n    update(id, updated) {\n      const updatedProducts = this.productsSubject.value.map(p => p.id === id ? { ...p,\n        ...updated\n      } : p);\n      this.productsSubject.next(updatedProducts);\n      localStorage.setItem(this.key, JSON.stringify(updatedProducts));\n    }\n\n    delete(id) {\n      const filtered = this.productsSubject.value.filter(p => p.id !== id);\n      this.productsSubject.next(filtered);\n      localStorage.setItem(this.key, JSON.stringify(filtered));\n    }\n\n    getById(id) {\n      return this.productsSubject.value.find(p => p.id === id);\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}