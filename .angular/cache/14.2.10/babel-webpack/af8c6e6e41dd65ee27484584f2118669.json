{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router) {\n      this.router = router;\n      const storedUser = localStorage.getItem('currentUser');\n      this.userSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n      this.user = this.userSubject.asObservable();\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    login(username, password) {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const user = users.find(u => u.username === username && u.password === password);\n\n      if (user) {\n        // Set current user in localStorage & BehaviorSubject\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.userSubject.next(user);\n        return of(true);\n      } else {\n        return throwError(() => new Error('Invalid username or password'));\n      }\n    }\n\n    setStaticAdmin() {\n      const adminUser = {\n        id: 'admin_static',\n        username: 'admin',\n        role: 'admin',\n        fullName: 'Administrator',\n        email: 'admin@example.com',\n        token: 'static-admin-token'\n      };\n      localStorage.setItem('currentUser', JSON.stringify(adminUser));\n      this.userSubject.next(adminUser); // ðŸ”¥ Triggers reactivity\n    }\n\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    }\n\n    register(user) {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const userExists = users.some(u => u.username === user.username);\n\n      if (userExists) {\n        return throwError(() => new Error('Username already exists'));\n      } // Generate unique ID (using timestamp + random string)\n\n\n      const uniqueId = 'user_' + Date.now() + '_' + Math.floor(Math.random() * 10000);\n      const newUser = {\n        id: uniqueId,\n        ...user\n      };\n      users.push(newUser);\n      localStorage.setItem('users', JSON.stringify(users));\n      return of(newUser);\n    }\n\n    update(id, updatedData) {\n      let users = JSON.parse(localStorage.getItem('users') || '[]');\n      users = users.map(user => user.id === id ? { ...user,\n        ...updatedData\n      } : user);\n      localStorage.setItem('users', JSON.stringify(users));\n\n      if (id === this.userValue?.id) {\n        const updatedUser = { ...this.userValue,\n          ...updatedData\n        };\n        localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n        this.userSubject.next(updatedUser);\n      }\n    }\n\n    delete(id) {\n      let users = JSON.parse(localStorage.getItem('users') || '[]');\n      users = users.filter(user => user.id !== id);\n      localStorage.setItem('users', JSON.stringify(users));\n\n      if (id === this.userValue?.id) {\n        this.logout();\n      }\n    }\n\n    getAll() {\n      return JSON.parse(localStorage.getItem('users') || '[]');\n    }\n\n    getById(id) {\n      return this.getAll().find(user => user.id === id);\n    }\n\n  }\n\n  AccountService.Éµfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ÉµÉµinject(i1.Router));\n  };\n\n  AccountService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: AccountService,\n    factory: AccountService.Éµfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}